---
prometheus_server_config: {}  # this is a map which should be defined by user
prometheus_clients_config: {}  # this is a map which should be defined by user
prometheus_server_data:
  packages:
    - docker.io
    - docker-compose
    - python3-pip
  docker:
    network_name: prometheus_network
    network_subnet: 10.10.10.0/24
    network_gateway: 10.10.10.1
    network_iprange: 10.10.10.128/25
  timescale:
    enabled: false
    container_name: pg_prometheus
    docker_image: "timescale/pg_prometheus:0.2.1"
    storage_dir: /var/lib/timescale/postgresql/data
    docker_labels:
      - postgres
      - timescale
      - storage
    postgres_password: postgres
  pg_adapter:  # Enabled automatically with timescale
    container_name: prometheus_postgresql_adapter
    docker_image: "timescale/prometheus-postgresql-adapter:0.4.1"
    docker_labels:
      - postgres
      - pg_adapter
      - timescale
      - storage
  victoriametrics:
    enabled: false
    container_name: victoriametrics
    docker_image: "victoriametrics/victoria-metrics:v1.19.4"
    storage_dir: /var/lib/victoriametrics/data
    docker_labels:
      - victoriametrics
      - storage
  prometheus:
    install_server: false
    container_name: prometheus_server
    docker_image: "prom/prometheus"
    docker_labels:
      - prometheus
      - prometheus_server
    config_dir: /var/lib/prometheus/
    # Real prometheus config
    config:
      global:
       scrape_interval:     5s
       evaluation_interval: 5s
      remote_write:
        #- url: "http://victoriametrics:8428/api/v1/write"
       - url: "http://127.0.0.1:8428/api/v1/write"
         queue_config:
           max_samples_per_send: 10000
         #- url: "http://prometheus_postgresql_adapter:9201/write"
      remote_read: []
         #- url: "http://prometheus_postgresql_adapter:9201/read"
      alerting:
        alertmanagers:
          - timeout: 10s
            path_prefix: /
            scheme: http
            static_configs:
              #- targets: ['alertmanager:9093']
              - targets: ['127.0.0.1:9093']
      rule_files:
        - 'templates/*.yml'
  alertmanager:
    enabled: false
    container_name: alertmanager
    docker_image: "prom/alertmanager:v0.17.0"
    docker_labels:
      - prometheus
      - alertmanager
    config_dir: /var/lib/alertmanager/
    config:
      global:
        resolve_timeout: 5m
      templates:
        - '/etc/alertmanager/template/*.tmpl'
      route:
        group_by: ['alertname']
        group_wait: 30s
        group_interval: 1m
        repeat_interval: 30m
        # Default receiver
        receiver: Telegram-personal
      inhibit_rules:
        - source_match:
            severity: 'critical'
          target_match:
            severity: 'warning'
          equal: ['alertname']
      receivers:
        - name: Telegram-personal
          webhook_configs:
            - send_resolved: true
              #url: 'http://alertsbot:8080'
              url: 'http://127.0.0.1:8080'
    telegram_bot:
      enabled: false
      config_dir: /var/lib/alertmanager_bot
      docker_image: "metalmatze/alertmanager-bot:0.4.2"
      container_name: alertsbot
      docker_labels:
        - prometheus
        - alertmanager
        - telegram-bot
        - alertmanager-bot
      telegram_admin: username
      telegram_token: token
prometheus_clients_data:
  exporters_reverse_proxy:
    enabled: false  # If enable, nginx will be installed to host
    port: 19100
  exporters_autossh_to_prometheus:
    enabled: false  # If enable, autossh will be installed and configured
    initial_port: 20000
    multiplier: 30
    master_ssh_port: 22
  exporters:
    node_exporter:
      enabled: false
      dockerized: false
      version: '0.18.1'
      arch: linux-amd64
      container_name: node_exporter
      config_dir: /var/lib/node_exporter
      docker_image: "quay.io/prometheus/node-exporter"
      host_port: 9100  # Used for reverse proxy also
      metrics_path: metrics
      docker_labels:
        - prometheus
        - exporter
        - node_exporter
    grok_exporter:
      enabled: false
      version: '0.2.7'
      arch: linux-amd64
      config_dir: /var/lib/grok_exporter
      patterns_dir: /var/lib/grok_exporter/patterns
      create_user: true
      username: grokexporter
      exporters:
        - name: nginx_access
          # For config example look at https://github.com/fstab/grok_exporter/blob/master/example/config.yml
          config:
            global:
              config_version: 2
              retention_check_interval: 53s
            input:
              type: file
              path: /var/log/nginx/access.log
              readall: false
            grok:
              patterns_dir: /var/lib/grok_exporter/patterns
              additional_patterns: []
            metrics:
              - type: counter
                name: nginx_access
                help: Total number of 5xx errors in according access log
                match: '%{NGINX_ACCESS}'
                labels:
                  error_type: '5xx'
            server:
              host: localhost
              port: 9144
    postgres_exporter:
      enabled: false
      dockerized: false
      container_name: postgres_exporter
      config_dir: /var/lib/postgres_exporter
      docker_image: "wrouesnel/postgres_exporter"
      version: v0.8.0
      arch: linux-amd64
      host_port: 9187  # Used for reverse proxy also
      metrics_path: metrics
      docker_labels:
        - prometheus
        - exporter
        - postgres_exporter
      data_source_name: "postgresql://postgres:postgres@127.0.0.1:5432?sslmode=disable"
    mysqld_exporter:
      enabled: false
      dockerized: false
      container_name: myslqd_exporter
      config_dir: /var/lib/mysqld_exporter
      docker_image: "prom/mysqld-exporter"
      create_user: false
      username: mysql
      version: 0.12.1
      arch: linux-amd64
      host_port: 9104  # Used for reverse proxy also
      metrics_path: metrics
      docker_labels:
        - prometheus
        - exporter
        - mysqld_exporter
      data_source_name: "mysql:mysql@(127.0.0.1:3306)/"
    blackbox_exporter:
      enabled: false
      dockerized: false
      create_user: true
      username: blackbox
      container_name: blackbox_exporter
      config_dir: /var/lib/blackbox
      docker_image: "prom/blackbox-exporter"
      version: 0.16.0
      arch: linux-amd64
      host_port: 9115  # Used for reverse proxy also
      metrics_path: probe
      docker_labels:
        - prometheus
        - exporter
        - blackbox_exporter
      probes_config:
        - scrape_params:
            module: [http_2xx]
          scrape_targets:
            - https://prometheus.io
            - google.com
          config_name: http
        - scrape_params:
            module: [icmp]
          scrape_targets:
            - 8.8.8.8
            - 1.1.1.1
          config_name: icmp
      blackbox_config:
        http_2xx:
          prober: http
          timeout: 5s
          http:
            method: GET
            valid_status_codes: []  # Defaults to 2xx
            valid_http_versions: ["HTTP/1.1", "HTTP/2"]
            preferred_ip_protocol: "ip4"
            no_follow_redirects: false
            fail_if_ssl: false
            fail_if_not_ssl: false
        icmp:
          prober: icmp
          timeout: 5s
          icmp:
            preferred_ip_protocol: "ip4"
    scripts_exporter:
      # We're using telegraf to execute custom scripts.
      enabled: false
      version: '1.13.2'
      arch: linux_amd64
      config_dir: /var/lib/telegraf
      scripts_dir: /var/lib/telegraf/scripts
      create_user: true
      username: telegraf
      listen_host: 127.0.0.1
      host_port: 9273
      scripts: []
      #scripts:
      #- name: test script
      #    script_name: "test"
      #    script_params: "test"
      #    data_format: json
      #    name_override: "test_metric"
    domain_exporter:
      enabled: false
      # dockerized: false  # Can be run only in docker
      container_name: domain_exporter
      docker_image: "caarlos0/domain_exporter"
      version: v1.7.2
      host_port: 9222  # Used for reverse proxy also
      config_dir: /var/lib/domain_exporter
      arch: linux-amd64
      metrics_path: probe
      docker_labels:
        - prometheus
        - exporter
        - domain_exporter
      domains:
        - google.ru
