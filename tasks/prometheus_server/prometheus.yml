---
- name: Prometheus | Ensure config directory
  file:
    state: directory
    # TODO(sbog): think how to define this dynamically
    path: "{{ prometheus.prometheus.config_dir }}/templates"
    mode: 0755
    owner: root
    group: root

- name: Set variable with scrape configs
  set_fact:
    scrape_configs: "{{ scrape_configs | default([]) + [hostvars[item].job_config] | flatten }}"
  with_items: "{{ ansible_play_hosts_all }}"
  when: hostvars[item].job_config is defined

- name: Prometheus | Ensure configuration file
  template:
    src: prometheus/prometheus.yml
    dest: "{{ prometheus.prometheus.config_dir }}/"
    mode: 0755
    owner: root
    group: root
  register: prom_config
  tags:
    - server_config
    - prometheus_config

- name: Prometheus | Ensure templates files
  copy:
    src: "{{ item }}"
    dest: "{{ prometheus.prometheus.config_dir }}/templates/{{ item | basename }}"
    mode: 0755
    owner: root
    group: root
  # Fileglob always operates started from 'files' dir, so move to 'templates'
  # explicitly
  with_fileglob:
    - prometheus/templates/*.yml
  notify:
    - Restart docker prometheus container

- name: Prometheus | Start docker prometheus container
  community.docker.docker_compose:
    state: present
    project_name: prometheus
    restarted: "{{ 'yes' if prom_config.changed else 'no' }}"
    definition:
      version: '2'
      services:
        prometheus:
          image: "{{ prometheus.prometheus.docker_image }}"
          container_name: "{{ prometheus.prometheus.container_name }}"
          ports:
            - "127.0.0.1:9090:9090"
          volumes:
            - "{{ prometheus.prometheus.config_dir }}/:/etc/prometheus/"
          hostname: "{{ prometheus.prometheus.container_name }}"
          restart: always
          labels: "{{ prometheus.prometheus.docker_labels }}"
          command:
            - "--config.file=/etc/prometheus/prometheus.yml"
            - "--storage.tsdb.path=/prometheus"
            - "--web.console.libraries=/usr/share/prometheus/console_libraries"
            - "--web.console.templates=/usr/share/prometheus/consoles"
            - "--web.enable-admin-api"
            - "--storage.tsdb.retention.time=7d"
      networks:
        default:
          external:
            name: "{{ prometheus.docker.network_name }}"
  when: prometheus.docker.network_name != "host"
  tags:
    - restart_prometheus_server

- name: Set prom_config var only for prometheus explicit restart
  set_fact:
    prom_config:
      changed: yes
  tags:
    - never
    - restart_prometheus_server

- name: Prometheus | Start docker prometheus container
  community.docker.docker_compose:
    state: present
    project_name: prometheus
    restarted: "{{ 'yes' if prom_config.changed else 'no' }}"
    definition:
      version: '2'
      services:
        prometheus:
          image: "{{ prometheus.prometheus.docker_image }}"
          container_name: "{{ prometheus.prometheus.container_name }}"
          ports:
            - "127.0.0.1:9090:9090"
          volumes:
            - "{{ prometheus.prometheus.config_dir }}/:/etc/prometheus/"
          hostname: "{{ prometheus.prometheus.container_name }}"
          restart: always
          labels: "{{ prometheus.prometheus.docker_labels }}"
          command:
            - "--config.file=/etc/prometheus/prometheus.yml"
            - "--storage.tsdb.path=/prometheus"
            - "--web.console.libraries=/usr/share/prometheus/console_libraries"
            - "--web.console.templates=/usr/share/prometheus/consoles"
            - "--web.enable-admin-api"
            - "--storage.tsdb.retention.time=7d"
          network_mode: host
  when: prometheus.docker.network_name == "host"
  failed_when: false
  tags:
    - restart_prometheus_server
